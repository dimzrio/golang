// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/calc.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalcReq struct {
	FirstNumber          float64  `protobuf:"fixed64,1,opt,name=firstNumber,proto3" json:"firstNumber,omitempty"`
	SeconNumber          float64  `protobuf:"fixed64,2,opt,name=seconNumber,proto3" json:"seconNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcReq) Reset()         { *m = CalcReq{} }
func (m *CalcReq) String() string { return proto.CompactTextString(m) }
func (*CalcReq) ProtoMessage()    {}
func (*CalcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7007f83d96181ae3, []int{0}
}

func (m *CalcReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcReq.Unmarshal(m, b)
}
func (m *CalcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcReq.Marshal(b, m, deterministic)
}
func (m *CalcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcReq.Merge(m, src)
}
func (m *CalcReq) XXX_Size() int {
	return xxx_messageInfo_CalcReq.Size(m)
}
func (m *CalcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcReq.DiscardUnknown(m)
}

var xxx_messageInfo_CalcReq proto.InternalMessageInfo

func (m *CalcReq) GetFirstNumber() float64 {
	if m != nil {
		return m.FirstNumber
	}
	return 0
}

func (m *CalcReq) GetSeconNumber() float64 {
	if m != nil {
		return m.SeconNumber
	}
	return 0
}

type CalcResp struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcResp) Reset()         { *m = CalcResp{} }
func (m *CalcResp) String() string { return proto.CompactTextString(m) }
func (*CalcResp) ProtoMessage()    {}
func (*CalcResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7007f83d96181ae3, []int{1}
}

func (m *CalcResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcResp.Unmarshal(m, b)
}
func (m *CalcResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcResp.Marshal(b, m, deterministic)
}
func (m *CalcResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcResp.Merge(m, src)
}
func (m *CalcResp) XXX_Size() int {
	return xxx_messageInfo_CalcResp.Size(m)
}
func (m *CalcResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcResp.DiscardUnknown(m)
}

var xxx_messageInfo_CalcResp proto.InternalMessageInfo

func (m *CalcResp) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*CalcReq)(nil), "model.calcReq")
	proto.RegisterType((*CalcResp)(nil), "model.calcResp")
}

func init() { proto.RegisterFile("model/calc.proto", fileDescriptor_7007f83d96181ae3) }

var fileDescriptor_7007f83d96181ae3 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcf, 0x6a, 0x84, 0x30,
	0x18, 0xc4, 0x49, 0xa1, 0x5a, 0xbe, 0x42, 0x53, 0x02, 0x2d, 0xa5, 0x27, 0xf1, 0xd4, 0x93, 0x05,
	0x4b, 0xa1, 0xd7, 0xb6, 0x7b, 0x75, 0x0f, 0x7a, 0xdb, 0x5b, 0x8c, 0x59, 0xf8, 0x20, 0x9a, 0x6c,
	0xfe, 0xf8, 0xd0, 0xfb, 0x14, 0x8b, 0x9a, 0x05, 0xf7, 0xe8, 0x71, 0x7e, 0xcc, 0x0c, 0xc3, 0xc0,
	0x73, 0xaf, 0x3b, 0xa9, 0x3e, 0x05, 0x57, 0xa2, 0x30, 0x56, 0x7b, 0xcd, 0xee, 0x67, 0x92, 0x57,
	0x90, 0x4e, 0xb0, 0x96, 0x27, 0x96, 0xc1, 0xe3, 0x11, 0xad, 0xf3, 0xfb, 0xd0, 0xb7, 0xd2, 0xbe,
	0x91, 0x8c, 0x7c, 0x90, 0x7a, 0x8d, 0x26, 0x87, 0x93, 0x42, 0x0f, 0xd1, 0x71, 0xb7, 0x38, 0x56,
	0x28, 0xcf, 0xe1, 0x61, 0xa9, 0x73, 0x86, 0xbd, 0x42, 0x62, 0xa5, 0x0b, 0xca, 0xc7, 0xaa, 0xa8,
	0xca, 0x33, 0x01, 0xfa, 0xcf, 0x95, 0xe0, 0x5e, 0xdb, 0x46, 0xda, 0x11, 0x85, 0x64, 0x25, 0xd0,
	0xdf, 0xae, 0x43, 0x8f, 0x7a, 0xb8, 0xa2, 0xa7, 0x62, 0x5e, 0x58, 0xc4, 0x79, 0xef, 0xf4, 0x46,
	0x3b, 0xc3, 0xbe, 0x81, 0x35, 0xa1, 0xf5, 0x96, 0x8b, 0x4d, 0xb1, 0x1f, 0x78, 0xa9, 0x82, 0xf2,
	0x68, 0x14, 0x0a, 0xbe, 0x29, 0x59, 0x02, 0xdd, 0xe1, 0x88, 0x6e, 0x43, 0xe6, 0x2f, 0x3d, 0x2c,
	0x47, 0xb7, 0xc9, 0x7c, 0xfb, 0xd7, 0x25, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x2d, 0xe9, 0xc7, 0x8a,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcatorServiceClient is the client API for CalcatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcatorServiceClient interface {
	AdditionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error)
	SubtractionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error)
	MultiplicationService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error)
	DivisionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error)
}

type calcatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalcatorServiceClient(cc *grpc.ClientConn) CalcatorServiceClient {
	return &calcatorServiceClient{cc}
}

func (c *calcatorServiceClient) AdditionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error) {
	out := new(CalcResp)
	err := c.cc.Invoke(ctx, "/model.CalcatorService/AdditionService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcatorServiceClient) SubtractionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error) {
	out := new(CalcResp)
	err := c.cc.Invoke(ctx, "/model.CalcatorService/SubtractionService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcatorServiceClient) MultiplicationService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error) {
	out := new(CalcResp)
	err := c.cc.Invoke(ctx, "/model.CalcatorService/MultiplicationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcatorServiceClient) DivisionService(ctx context.Context, in *CalcReq, opts ...grpc.CallOption) (*CalcResp, error) {
	out := new(CalcResp)
	err := c.cc.Invoke(ctx, "/model.CalcatorService/DivisionService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcatorServiceServer is the server API for CalcatorService service.
type CalcatorServiceServer interface {
	AdditionService(context.Context, *CalcReq) (*CalcResp, error)
	SubtractionService(context.Context, *CalcReq) (*CalcResp, error)
	MultiplicationService(context.Context, *CalcReq) (*CalcResp, error)
	DivisionService(context.Context, *CalcReq) (*CalcResp, error)
}

func RegisterCalcatorServiceServer(s *grpc.Server, srv CalcatorServiceServer) {
	s.RegisterService(&_CalcatorService_serviceDesc, srv)
}

func _CalcatorService_AdditionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcatorServiceServer).AdditionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.CalcatorService/AdditionService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcatorServiceServer).AdditionService(ctx, req.(*CalcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcatorService_SubtractionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcatorServiceServer).SubtractionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.CalcatorService/SubtractionService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcatorServiceServer).SubtractionService(ctx, req.(*CalcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcatorService_MultiplicationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcatorServiceServer).MultiplicationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.CalcatorService/MultiplicationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcatorServiceServer).MultiplicationService(ctx, req.(*CalcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcatorService_DivisionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcatorServiceServer).DivisionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.CalcatorService/DivisionService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcatorServiceServer).DivisionService(ctx, req.(*CalcReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalcatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.CalcatorService",
	HandlerType: (*CalcatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdditionService",
			Handler:    _CalcatorService_AdditionService_Handler,
		},
		{
			MethodName: "SubtractionService",
			Handler:    _CalcatorService_SubtractionService_Handler,
		},
		{
			MethodName: "MultiplicationService",
			Handler:    _CalcatorService_MultiplicationService_Handler,
		},
		{
			MethodName: "DivisionService",
			Handler:    _CalcatorService_DivisionService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/calc.proto",
}
