// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/sumAvg.proto

package model

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AvgReq struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvgReq) Reset()         { *m = AvgReq{} }
func (m *AvgReq) String() string { return proto.CompactTextString(m) }
func (*AvgReq) ProtoMessage()    {}
func (*AvgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_70101d56473b3925, []int{0}
}

func (m *AvgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvgReq.Unmarshal(m, b)
}
func (m *AvgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvgReq.Marshal(b, m, deterministic)
}
func (m *AvgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgReq.Merge(m, src)
}
func (m *AvgReq) XXX_Size() int {
	return xxx_messageInfo_AvgReq.Size(m)
}
func (m *AvgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgReq.DiscardUnknown(m)
}

var xxx_messageInfo_AvgReq proto.InternalMessageInfo

func (m *AvgReq) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type AvgResp struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvgResp) Reset()         { *m = AvgResp{} }
func (m *AvgResp) String() string { return proto.CompactTextString(m) }
func (*AvgResp) ProtoMessage()    {}
func (*AvgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_70101d56473b3925, []int{1}
}

func (m *AvgResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvgResp.Unmarshal(m, b)
}
func (m *AvgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvgResp.Marshal(b, m, deterministic)
}
func (m *AvgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgResp.Merge(m, src)
}
func (m *AvgResp) XXX_Size() int {
	return xxx_messageInfo_AvgResp.Size(m)
}
func (m *AvgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgResp.DiscardUnknown(m)
}

var xxx_messageInfo_AvgResp proto.InternalMessageInfo

func (m *AvgResp) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*AvgReq)(nil), "model.avgReq")
	proto.RegisterType((*AvgResp)(nil), "model.avgResp")
}

func init() { proto.RegisterFile("model/sumAvg.proto", fileDescriptor_70101d56473b3925) }

var fileDescriptor_70101d56473b3925 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2f, 0x2e, 0xcd, 0x75, 0x2c, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x8b, 0x29, 0x29, 0x70, 0xb1, 0x25, 0x96, 0xa5, 0x07, 0xa5, 0x16, 0x0a, 0x89, 0x71, 0xb1,
	0xe5, 0x95, 0xe6, 0x26, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x79, 0x4a,
	0x8a, 0x5c, 0xec, 0x60, 0x15, 0xc5, 0x05, 0x20, 0x25, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x60,
	0x25, 0x4c, 0x41, 0x50, 0x9e, 0x91, 0x25, 0x17, 0x57, 0x62, 0x59, 0x7a, 0x70, 0x6a, 0x51, 0x59,
	0x66, 0x72, 0xaa, 0x90, 0x36, 0x17, 0x1b, 0xc4, 0x26, 0x21, 0x5e, 0x3d, 0xb0, 0x25, 0x7a, 0x10,
	0x1b, 0xa4, 0xf8, 0x90, 0xb9, 0xc5, 0x05, 0x4a, 0x0c, 0x1a, 0x8c, 0x4e, 0xec, 0x51, 0x10, 0x87,
	0x24, 0xb1, 0x81, 0x9d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x92, 0xc7, 0x35, 0x75, 0xac,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AvgServiceClient is the client API for AvgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AvgServiceClient interface {
	SumAvg(ctx context.Context, opts ...grpc.CallOption) (AvgService_SumAvgClient, error)
}

type avgServiceClient struct {
	cc *grpc.ClientConn
}

func NewAvgServiceClient(cc *grpc.ClientConn) AvgServiceClient {
	return &avgServiceClient{cc}
}

func (c *avgServiceClient) SumAvg(ctx context.Context, opts ...grpc.CallOption) (AvgService_SumAvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvgService_serviceDesc.Streams[0], "/model.avgService/sumAvg", opts...)
	if err != nil {
		return nil, err
	}
	x := &avgServiceSumAvgClient{stream}
	return x, nil
}

type AvgService_SumAvgClient interface {
	Send(*AvgReq) error
	CloseAndRecv() (*AvgResp, error)
	grpc.ClientStream
}

type avgServiceSumAvgClient struct {
	grpc.ClientStream
}

func (x *avgServiceSumAvgClient) Send(m *AvgReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avgServiceSumAvgClient) CloseAndRecv() (*AvgResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServiceServer is the server API for AvgService service.
type AvgServiceServer interface {
	SumAvg(AvgService_SumAvgServer) error
}

func RegisterAvgServiceServer(s *grpc.Server, srv AvgServiceServer) {
	s.RegisterService(&_AvgService_serviceDesc, srv)
}

func _AvgService_SumAvg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServiceServer).SumAvg(&avgServiceSumAvgServer{stream})
}

type AvgService_SumAvgServer interface {
	SendAndClose(*AvgResp) error
	Recv() (*AvgReq, error)
	grpc.ServerStream
}

type avgServiceSumAvgServer struct {
	grpc.ServerStream
}

func (x *avgServiceSumAvgServer) SendAndClose(m *AvgResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avgServiceSumAvgServer) Recv() (*AvgReq, error) {
	m := new(AvgReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AvgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.avgService",
	HandlerType: (*AvgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sumAvg",
			Handler:       _AvgService_SumAvg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "model/sumAvg.proto",
}
